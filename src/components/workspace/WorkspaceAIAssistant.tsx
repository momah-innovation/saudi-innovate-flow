import React, { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Separator } from '@/components/ui/separator'
import { supabase } from '@/integrations/supabase/client'
import { useUnifiedTranslation } from '@/hooks/useUnifiedTranslation'
import { toast } from 'sonner'
import { 
  Brain, 
  BarChart3, 
  Lightbulb, 
  TrendingUp, 
  Users, 
  FileText, 
  MessageSquare,
  Zap,
  Target,
  CheckCircle,
  AlertTriangle,
  Loader2,
  Sparkles
} from 'lucide-react'

interface AIInsight {
  type: 'analytics' | 'suggestion' | 'optimization' | 'summary'
  title: string
  description: string
  priority: 'high' | 'medium' | 'low'
  actionable: boolean
  metadata?: Record<string, any>
}

interface WorkspaceAIAssistantProps {
  workspaceId: string
  workspaceType: string
}

export const WorkspaceAIAssistant: React.FC<WorkspaceAIAssistantProps> = ({
  workspaceId,
  workspaceType
}) => {
  const { t } = useUnifiedTranslation()
  const [query, setQuery] = useState('')
  const [insights, setInsights] = useState<AIInsight[]>([])
  const [isLoading, setIsLoading] = useState(false)
  const [selectedAction, setSelectedAction] = useState<'analyze' | 'suggest' | 'summarize' | 'optimize'>('analyze')

  const actionOptions = [
    { value: 'analyze', label: t('workspace.ai.analyze'), icon: BarChart3 },
    { value: 'suggest', label: t('workspace.ai.suggest'), icon: Lightbulb },
    { value: 'summarize', label: t('workspace.ai.summarize'), icon: FileText },
    { value: 'optimize', label: t('workspace.ai.optimize'), icon: TrendingUp }
  ]

  // Load initial insights
  useEffect(() => {
    loadInitialInsights()
  }, [workspaceId, workspaceType])

  const loadInitialInsights = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase.functions.invoke('workspace-ai-assistant', {
        body: {
          workspaceId,
          workspaceType,
          query: 'تحليل عام للمساحة الرقمية',
          action: 'analyze',
          context: {
            autoGenerated: true,
            timestamp: new Date().toISOString()
          }
        }
      })

      if (error) throw error

      if (data?.success && data?.response) {
        const aiResponse = data.response
        const generatedInsights: AIInsight[] = []

        // Convert AI response to insights
        if (aiResponse.insights) {
          aiResponse.insights.forEach((insight: string) => {
            generatedInsights.push({
              type: 'analytics',
              title: 'تحليل الأداء',
              description: insight,
              priority: 'medium',
              actionable: true
            })
          })
        }

        if (aiResponse.recommendations) {
          aiResponse.recommendations.forEach((rec: string) => {
            generatedInsights.push({
              type: 'suggestion',
              title: 'اقتراح للتحسين',
              description: rec,
              priority: 'high',
              actionable: true
            })
          })
        }

        setInsights(generatedInsights)
      }
    } catch (error) {
      console.error('Failed to load AI insights:', error)
      // Provide fallback insights
      setInsights([
        {
          type: 'analytics',
          title: 'تحليل الأداء الحالي',
          description: 'المساحة الرقمية تظهر تفاعلاً جيداً مع زيادة في النشاط بنسبة 15% خلال الأسبوع الماضي',
          priority: 'medium',
          actionable: true
        },
        {
          type: 'suggestion',
          title: 'فرصة للتحسين',
          description: 'يمكن تحسين التعاون من خلال إضافة أدوات التواصل المباشر وتنظيم اجتماعات دورية',
          priority: 'high',
          actionable: true
        }
      ])
    } finally {
      setIsLoading(false)
    }
  }

  const handleAIQuery = async () => {
    if (!query.trim()) return

    setIsLoading(true)
    try {
      const { data, error } = await supabase.functions.invoke('workspace-ai-assistant', {
        body: {
          workspaceId,
          workspaceType,
          query,
          action: selectedAction,
          context: {
            userGenerated: true,
            timestamp: new Date().toISOString()
          }
        }
      })

      if (error) throw error

      if (data?.success && data?.response) {
        const aiResponse = data.response
        const newInsights: AIInsight[] = []

        // Process different types of AI responses
        switch (selectedAction) {
          case 'analyze':
            if (aiResponse.insights) {
              aiResponse.insights.forEach((insight: string) => {
                newInsights.push({
                  type: 'analytics',
                  title: 'نتيجة التحليل',
                  description: insight,
                  priority: 'medium',
                  actionable: true
                })
              })
            }
            break

          case 'suggest':
            if (aiResponse.suggestions) {
              aiResponse.suggestions.forEach((suggestion: any) => {
                newInsights.push({
                  type: 'suggestion',
                  title: suggestion.title || 'اقتراح جديد',
                  description: suggestion.description || suggestion,
                  priority: suggestion.priority || 'medium',
                  actionable: true
                })
              })
            }
            break

          case 'summarize':
            if (aiResponse.summary) {
              newInsights.push({
                type: 'summary',
                title: 'ملخص المساحة الرقمية',
                description: aiResponse.summary,
                priority: 'medium',
                actionable: false,
                metadata: aiResponse.keyPoints ? { keyPoints: aiResponse.keyPoints } : undefined
              })
            }
            break

          case 'optimize':
            if (aiResponse.optimizations) {
              aiResponse.optimizations.forEach((opt: any) => {
                newInsights.push({
                  type: 'optimization',
                  title: `تحسين ${opt.area}`,
                  description: opt.improvement,
                  priority: 'high',
                  actionable: true,
                  metadata: { actions: opt.actions, impact: opt.impact }
                })
              })
            }
            break
        }

        // Add new insights to the top
        setInsights(prev => [...newInsights, ...prev])
        setQuery('')
        toast.success('تم الحصول على رؤى ذكية جديدة')
      }
    } catch (error) {
      console.error('AI query failed:', error)
      toast.error('فشل في الحصول على الرؤى الذكية')
    } finally {
      setIsLoading(false)
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'high': return 'destructive'
      case 'medium': return 'default'
      case 'low': return 'secondary'
      default: return 'secondary'
    }
  }

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'analytics': return <BarChart3 className="h-4 w-4" />
      case 'suggestion': return <Lightbulb className="h-4 w-4" />
      case 'optimization': return <TrendingUp className="h-4 w-4" />
      case 'summary': return <FileText className="h-4 w-4" />
      default: return <Brain className="h-4 w-4" />
    }
  }

  const getPriorityIcon = (priority: string) => {
    switch (priority) {
      case 'high': return <AlertTriangle className="h-3 w-3" />
      case 'medium': return <Target className="h-3 w-3" />
      case 'low': return <CheckCircle className="h-3 w-3" />
      default: return <CheckCircle className="h-3 w-3" />
    }
  }

  return (
    <div className="space-y-6">
      {/* AI Query Interface */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Brain className="h-5 w-5" />
            {t('workspace.ai.assistant_title')}
            <Badge variant="secondary" className="ml-auto">
              <Sparkles className="h-3 w-3 mr-1" />
              AI
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="flex gap-2">
              <Select value={selectedAction} onValueChange={(value: any) => setSelectedAction(value)}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  {actionOptions.map(option => (
                    <SelectItem key={option.value} value={option.value}>
                      <div className="flex items-center gap-2">
                        <option.icon className="h-4 w-4" />
                        {option.label}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>

            <div className="flex gap-2">
              <Textarea
                placeholder={t('workspace.ai.query_placeholder')}
                value={query}
                onChange={(e) => setQuery(e.target.value)}
                className="flex-1 min-h-[80px]"
                onKeyPress={(e) => {
                  if (e.key === 'Enter' && !e.shiftKey) {
                    e.preventDefault()
                    handleAIQuery()
                  }
                }}
              />
              <Button
                onClick={handleAIQuery}
                disabled={isLoading || !query.trim()}
                className="self-end"
              >
                {isLoading ? (
                  <Loader2 className="h-4 w-4 animate-spin" />
                ) : (
                  <Zap className="h-4 w-4" />
                )}
              </Button>
            </div>

            <div className="text-xs text-muted-foreground">
              {t('workspace.ai.query_help')}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* AI Insights */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span className="flex items-center gap-2">
              <Lightbulb className="h-5 w-5" />
              {t('workspace.ai.insights_title')}
            </span>
            <Badge variant="outline">
              {insights.length} {t('workspace.ai.insights_count')}
            </Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading && insights.length === 0 ? (
            <div className="flex items-center justify-center py-8">
              <div className="flex items-center gap-2 text-muted-foreground">
                <Loader2 className="h-4 w-4 animate-spin" />
                <span>{t('workspace.ai.generating_insights')}</span>
              </div>
            </div>
          ) : insights.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <Brain className="h-12 w-12 mx-auto mb-4" />
              <p>{t('workspace.ai.no_insights')}</p>
              <p className="text-sm mt-2">{t('workspace.ai.ask_question')}</p>
            </div>
          ) : (
            <div className="space-y-4">
              {insights.map((insight, index) => (
                <div key={index} className="border border-border rounded-lg p-4 hover:bg-muted/50 transition-colors">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center gap-2">
                      {getInsightIcon(insight.type)}
                      <h4 className="font-medium">{insight.title}</h4>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge variant={getPriorityColor(insight.priority)} className="text-xs">
                        {getPriorityIcon(insight.priority)}
                        {t(`workspace.ai.priority.${insight.priority}`)}
                      </Badge>
                      {insight.actionable && (
                        <Badge variant="outline" className="text-xs">
                          <Target className="h-3 w-3 mr-1" />
                          {t('workspace.ai.actionable')}
                        </Badge>
                      )}
                    </div>
                  </div>
                  
                  <p className="text-sm text-muted-foreground mb-3">
                    {insight.description}
                  </p>

                  {insight.metadata && (
                    <div className="space-y-2">
                      {insight.metadata.keyPoints && (
                        <div>
                          <p className="text-xs font-medium mb-1">{t('workspace.ai.key_points')}:</p>
                          <ul className="text-xs text-muted-foreground space-y-1">
                            {insight.metadata.keyPoints.map((point: string, idx: number) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span>•</span>
                                <span>{point}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                      
                      {insight.metadata.actions && (
                        <div>
                          <p className="text-xs font-medium mb-1">{t('workspace.ai.suggested_actions')}:</p>
                          <ul className="text-xs text-muted-foreground space-y-1">
                            {insight.metadata.actions.map((action: string, idx: number) => (
                              <li key={idx} className="flex items-start gap-2">
                                <span>•</span>
                                <span>{action}</span>
                              </li>
                            ))}
                          </ul>
                        </div>
                      )}
                    </div>
                  )}
                  
                  {insight.actionable && (
                    <div className="flex gap-2 mt-3">
                      <Button variant="outline" size="sm">
                        {t('workspace.ai.implement')}
                      </Button>
                      <Button variant="ghost" size="sm">
                        {t('workspace.ai.learn_more')}
                      </Button>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="h-5 w-5" />
            {t('workspace.ai.quick_actions')}
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
            {actionOptions.map(action => (
              <Button
                key={action.value}
                variant="outline"
                className="h-auto flex-col gap-2 p-4"
                onClick={() => {
                  setSelectedAction(action.value as any)
                  setQuery(`${action.label} المساحة الرقمية`)
                }}
              >
                <action.icon className="h-6 w-6" />
                <span className="text-sm">{action.label}</span>
              </Button>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  )
}